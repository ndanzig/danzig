<html>
<head>
<TITLE>Introduction to Computer Science C++ - Functions</TITLE>
</head>
<BODY BGCOLOR="#fafafa" TEXT="#000044" link="#000099" vlink="#990000" alink="#00ff00">
<CENTER><H2>Introduction to Computer Science - C++</H2>    </CENTER>

<center><H3>Functions</H3></CENTER>

<i>Note: since a lot of what I am going to explain here will only make  sense after
you have the whole picture in your head, you may want to skim or skip this 
explanation until you reach the
example myAverageFunction, take a look at that example, and then re-read this 
explanation. </i>

<p>
A Function (sometimes called a <b>method</b>) is sort of a mini-program 
within your program. It is a set of actions defined inside braces { } preceded
by an identifier of your choosing. The identifier works like the label we saw
with goto.  It allows the computer to later refer to this set of actions.
The identifier and set of
actions is actually written <b>outside the outermost set of braces which
 follow main()</b>.
When we want to do these actions, we can refer to the identifier name we 
assigned to the set of actions. When we write the name of the function, 
automatically, all its actions will be executed.  

<p>We can say that a function behaves like a  "Black Box". No, not the 
black box in airplanes. This black box is a metaphor. It means 
that a function does a set of actions to achieve a certain easilly definable
 result.  However, when I use the function
I don't need to know how it gets the job done.  The details are therefore 
hidden, as though they are in an opaque box  or  in a  "black box".
<p>

For example here is a function named print_hello:
<pre>
void print_hello()
{
cout<<"hello "; 
}
</pre
<p>

This function, as its name suggests, writes hello on the monitor.
The set of actions is a set of one action, a cout command.  
The word <i>void</i> means the function has no return values. (see 
section Return Values ) 
 The empty set of parenthesis 
indicate we are working with no inputs.  This is a very simple function.  Too simple
in fact to justify writing it, but it does show us the structure of a function.
<p>

If I wanted to use this function in a program I could write a complete program.

<pre>


void print_hello()
{
cout<<"hello "; 
}

main()
{
print_hello();
}
</pre>
<p>
You should notice that the function is written outside of the braces which follow 
the main.
Not only that but it is written before the main. Notice that the stucture of
print_hello mimics the stucture of a program.  It has a set of () parenthesis 
followed by a set of {} braces.  Inside the braces is a set of commands.
The function print_hello does something, but it does not get any information
from the outside world, like for example how many times to print hello.  Functions can
get information from the outside world, this information is called input values or
 parameters.
<p>
 
A function can have input values and also it can have output values.
Let me make a comparison.
A coin operated coffee machine is like a function.  
It  has 
inputs, the buttons you press to tell it if you want the coffee with
or without sugar or with or without milk, etc.  After receiving these 
inputs, the coffee machine does a large set of actions and then produces
an output, your cup of coffee.  The inner workings of the coffee machine do not
interest you, you just relate to it by the inputs you give it (the button 
presses) and the output you receive, the coffee. So the coffee machine is a 
sort of "black box".
<p>Functions work the same way.  There are many inputs which define 
what the function will do and one output, the result.  As in the case of  the coffee
machine there are many inputs to a function but only one output.
We as programmers are kind of like coffee machine builders.  It is 
our job to make functions. So we do know the inner workings of the 
function (or coffee machine).  In fact we make it!  Later we can use our 
self-made functions and forget how they work, like the coffee machine engineer
who may after he finishes his work, press some buttons and get some coffee 
for himself.

<h3>Function Definition</h3> 

Making a function is called <i>defining a function</i>.

<br>A function is defined according to the following format:
<br>
<tt>
<pre>
return-type functionName( type parameter1, type parameter2, ....)
{
statement;
statement;
statement;
:
:
return return-type;
}</pre>
</tt>
<p>
The return-type is the output of the function.  It can be an int, a float, 
a char etc.  If the function has no outputs, then write void for the 
return-type.
The parameters  (parameter1, ...) are the data 
inputs to the function.  There is only one output but there can be any 
number of 
inputs. If there are multiple parameters they are seperated by commas.
Each parameter must be a composed of a type and a valid identifier.
If the function has no inputs, then leave the parameter list blank or write the word
<i>void</i> between the parenthesis.
Each parameter acts as a variable which can be used inside the function.
It is as though I have defined several variables (in my parameter list) so that I 
can then use them inside my function { }.

<h3>Function Proto-type</h3>
<p>It is a good idea to write a function proto-type at the start of your 
program for each function you plan to define.  A function proto-type is
a way of telling the compiler what functions you plan to define later on.
This is useful when you have one function using another function.  
The funtion proto-type looks just like the first line of the function definition
with the addition of a semi-colon ; at the end.
<br>
<tt>return-type functionName( type parameter1, type parameter2, ....);</tt>
<br>
So all you need to do is cut and paste the first line of your function definition
to the top of your program file and then add a semi-colon.
<h3>Function Call</h3>

<p>The function call is when 
I try to run the function.  To do this I simply write the name of the function
 followed by ( ). Inside the ( ) I place the list of values I want to 
pass to the function parameters. This is called a function call.
When I do this, the values I input are assigned to the variables in the 
parameter list.  
The order of the list determines which values are assigned to which variables.
The function will then be able to access these values by using the variables
defined in its parameter list.
<br> When we call a function we <i>pass</i> values into the function. 


<p> As I have stated, parameters are the list of comma deliniated variables
which are used as inputs to the function. 
 We can
have as many parameters (inputs) as we want.  Although it is true that these variables are defined 
locally ( i.e. within a function ) the <b>values</b> they get are equal to the values the 
caller supplies in his argument list. 
<p>
For example:
<p>
<font color="green"> float myAverageFunction( int a, int b, int c )  </font><br> has three parameters. All three are floats. If I were to pass it the values 1 , 2, and 7 to the function like this
<font color="green">myFunction( 1, 2, 7 )  </font> 
then "a" would get the value 1, "b" would get the value 2, and "c" would
get the value 7.  The order of the numbers determines which value is assigned to which variable.
Furthermore, if my function is defined as using 3 parameters then I must pass it 3 
values whenever I call the function.  I cannot ignore any of the required inputs.
<h3>Return Values</h3>
<p> When we call a function we <i>pass</i> values into 
the function. We can also get a value back out of the function.
This value we get back can be stored in a variable when the function is called.
If a function outputs some value when it is done, this is called a <i>return 
value</i>. After the functions does its job, the value it returns will
be placed exactly in the place where the function call is written.
Thus a statement like:
<pre>
int a = myAverageFunction ( 3,4,5);
</pre>
will actually become something like this:
<pre>
int a = 4;
</pre>
 In other words, the variable a will be assigned the value that 
the function myAverageFunction() returns.
<br>
To repeat myself, the return value is sent back to the place where the function was called.
  If, for example, there was an assignment operator
there then the variable being assigned will get the value the function returns.
<br>For example:<br> <font  color="blue">float a = myAverageFunction( 90, 75, 87  ) </font>.<br>
In this example, "a" will be assigned the value myAverageFunction returns.

<p>
To return a value, use the key-word <font  color="green"> return  </font> followed by the 
value you wish to return.  This 
statement occurs inside the function and causes the function to exit
(i.e. finish immediately). 
 Functions can return only one value. You must specify
the type value the function returns, for example int or float or char.
<p>
Even if a function returns a value, I can theoretically choose 
not to store the returned value. I can let the value "drop".
It is as though a player would throw the baseball back to the pitcher
at the end of the play, but the pitcher would just watch it fall to the ground.
He just lets the ball drop.  In the same way, a function can return a value
to the caller, but the caller may or may not choose to store the value in a variable.
For example I could call myAverageFunction like this:
<pre>
myAverageFunction(4,67,89);
</pre>
In this case the function will get run as usual, but the return value
has no place to go.  It will be lost.  Generally it is a good idea to store the return value in a variable so that you can use it in the
 future. But you can also choose not to store it and let it drop as
 above. One occasion where it might make sense not to store the return value is when you need to print the return value once and then do
 not need it any more.   To do this you could write something like
 this:
<pre>
cout&lt;&lt;myAverageFunction(4,67,89);
</pre>
Here, although I do not store the return value, I am able to see what
 it is.  But after that I have lost the value.


<p> Functions can also return nothing. 
 In this case we have the function return <b>void</b>.  If I want to write
a function that does not return any value I must declare the 
function like this:
<pre>
void myFunction (int a )
{


return;
}
</pre>
Notice that the return type is <b>void</b>.  Also notice that the return 
statement is not followed by any value. I simply write <tt>return;
</tt>. 

<p>
When I call such a function in the main I cannot store the return 
value since there is no return value.  I simply call the function:
<pre>
int main()
{
myFunction(7);

}
</pre>

<h3> Function definition </h3>
<p> Writing the function is called defining it.  Some functions are built-in, but the
programmer may write his own functions (as I did in the above examples).  To do this, he must define the function.  That is, he must
define what return value type he intends to return, what paramenters he can accept, and of course
what the function will actually do with the values it receives when it is called.
<br>
Here is a function definition:
<br>
<br><font  color="blue">float </font><font  color="green">myAverageFunction </font>
(<font  color="blue">int </font><font  color="green"> a </font>, 
<font  color="blue">int  </font><font  color="green">b </font>, <font  color="blue">int </font><font  color="green"> c</font> )
<br>{
<br><font  color="blue">float </font> <font  color="green">average</font>; <br>

<font  color="green">average</font> = ( ( 
<font  color="blue">float </font> ) <font  color="green">
a </font> * ( <font  color="blue">float </font>) <font  color="green">
b  </font> * (<font  color="blue">float </font> ) <font  color="green">c </font> /   3  );
<br><font  color="blue">return </font>  <font  color="green">average</font>;

<br>}


<p>This function takes 3 parameters all of type int.  It then computes the
average of the 3 numbers and returns that value to the caller as a float.
<br>If the calling function had a line like this, for example:
<br> 
<font  color="blue">float a = myAverageFunction( 95, 80 , 80  ) </font>;<br>
Then "a" would get the value 85 (the average of the 3 numbers).
Once I have written the function definitition, I can then use the function to
compute averages as many times as I wish.  Furthermore, I can use it without
worrying how it does its job.  I can treat the function as a black box.

<p>If you want to write a function without any retrun value, write the 
word <i>void> </i> in place of the  return type like this:
<Pre>
void myfunction()
{
cout&lt;&lt;"hello";
return;
}

</pre>
Notice that I used the word return to show the end of the program but did not follow
it with any value.  This is because I am returning void, not an actual value.
You may also choose to leave out the <i>return</i> line altogether.

<h3>Scope of Variables</h3>
<p>Variables are only recognized inside the block of code where they 
are defined.  Thus, a variable defined within a nested block of code is not 
known outside the inner nest.
The same hold true for functions.  
 Variables in one function are not known by variables in other functions. The 
variables defined by the function are not known by the calling function.  
When I call a function, copies of the values of the
variables I pass are sent to the function, not the original variables.
For example, if I call a function like this

<br> <font  color="blue">
int num1 = 95; <br>
int num2 = 80; <br>
int num3 = 80; <br>
float a; <br>
a = myAverageFunction( num1, num2, num3  ) </font>;<br>

then the values of num1, num2, and num3 are passed, not the actual variables.

Practically what this means is that num1, num2, and num3 cannot be changed or
affected in any way by the function. The function myAverageFunction will
just get the values 95, 80 ,and 80 and assign them to its local 
variables a, b, and c and work with them.  (Note: When we learn <i>pointers</i>
we will learn how a function <b>can</b> affect the original variables it
is passed. )

<p>Let's see an example of a function which attempts to change a variable outside
 its scope. The function  will obviously not succeed at this.
<pre>
void changeMe(int a)
{
a++;
return;
}
</pre>
If this function were called in the main of a program like this
<pre>
int var =9;
changeMe(var);
</pre>
 the variable (var) passed  to the function would not actually change
(var will still be 9).

<p>If I want to change the variable I will have to return a new value as an 
output and then store it in the variable in main.  Here is an example
of how I could really change the variable (notice I changed the function name
to more exactly describe its function):

<pre>
int returnLargerValue(int a)
{
return (a++);
}

int main()
{
int var=9;
var=returnLargerValue(var);

return 0;
}

</pre>
The above example will actually increase var by 1.  Notice that I had to return a
new larger value and then use the assignment operator to reset var to the new value.

<h3>Global Variables</h3>
A way around the problem of scope is global variables.
Global variables are defined outside the braces of the main function.
They are therefore in the scope of all functions in the program.
For various reasons, global variables are considered dangerous.
Do not create or use global variables.

<h3>Functions Calling Other Functions</h3>




<h3> Function Overloading</h3>
<p>
The computer distinguishes between different functions not only based on their 
different names, but also based on their different parameter lists.
This means that if you create two functions with the same name but 
different parameters, the computer will consider these functions as being 
different functions that just happen to have the same name. When you call the
 function, the compiler will decide which function you mean by checking 
how many and which parameters you passed.  Depending on these parameters, the
compiler will decide which function to actually call.
For example the functions defined by these two function proto-types
are different even though they have the same name.
<p>
<tt>
float findArea(float size);
<br>float findArea(float size, float width ); </tt>
<p>
The first function has one parameter and the second function has two, so 
they are different functions even though they have the same name.
The inner working of the two functions can be as different as night and day,
 or they can be quite similar.  This depends on what the programmer writes in the function
definitions of the two (or more) functions.  Usually the functions will be written
to have similar operations since, after all, the name is supposed to reflect what 
the function does and they have the same name.  
<p>
When these functions are called, the compiler will choose the function
definition that matches the parameters supplied.
For example, if I write <tt>findArea(7.766, 3.456)</tt>  then the
second function will be called since only the second function has two parameters.  When programmers write different functions with 
the same name we call it <b>overloading</b> a function since the function
seems to have two or more different ways of workings. 
Despite the negative sound of the term, there is nothing wrong with function overloading.
  </tt> 
<h3> Default Parameters</h3>
<p>
Another interesting feature of functions is the possibility of providing 
default parameters.  What this means is that if the call to the function is missing some parameters, then the function will provide its own values for the 
missing parameters.


Let me give an example.  Lets say I want to write a function to compute the 
circumference
of a circle given its radius.  We know the formula c = 2 * Pi * r
<br>where c is cirumference, Pi is the value of Pi , about 3.14 and
r is the radius.

I can write the function like this: 
<br>
<br>float  circum(float radius, float Pi=3.14)
<br>{
<br>float total;
<br>total = 2 * Pi * radius;
<br>return total;
<br>}
<br>
 
Now if I call the function with one parameter, it will assume that parameter
is radius and will use the value 3.14 for Pi, but if I provide two parameters
when I call the program it will use the second value for Pi in place of 3.14.
This makes sense in this example since the person using my function may want 
to compute the circumference of the circle using a more precise value for Pi.
Here is an example of a complete program:
<font color="blue"><tt>
<br>
<br>#include&lt;iostream&gt;
<br>using namespace std;
<br>
<br>float  circum(float radius, float Pi=3.14);
<br>

<br>int main()
<br>{
<br>float someFloat;
<br>someFloat = circum (7.0);
<br>cout &lt;&lt;"Circumference using Pi as 3.14 (default)" &lt;&lt;someFloat&lt;&lt;endl;
<br>someFloat = circum (7.0, 3.1416);
<br>cout&lt;&lt;"Circumference using Pi as 3.1416" &lt;&lt;someFloat&lt;&lt;endl;
<br>
<br>return 0;
<br>}
<br>
<br>float circum(float radius, float Pi=3.14)
<br>{
<br>float total;
<br>total = 2.0 * Pi * radius;
<br>return total;
<br>}
<br>
</tt>
</font>
</p>

<h3>Libraries</h3>
<p> There are many functions already written by people which can be
used.  These functions are grouped together and are stored in 
what are called libraries.  These different libraries
are groups of functions somehow related to each other.
In the math.h library there are functions like pwr to raise something
to a power, and sqrt to find a square root of a number. 
There is also a standard library with many useful function.  This
library is abreviated either stdlib or cstdlib.  One useful
function in this library is  the rand function.  The rand function 
produces a  random number. Use it like this:
<pre>
float a = rand();
</pre>
The function will return a random decimal number between 0 and 1.
To get it to produce numbers within a certain range use the modulus
 operator. Note that the remainder of a division operation
will always be an integer between 0 and the number.  Thus if I want
a random number between 1 and 100 I should write this:
<pre>
int a = rand()%100 + 1 ;
</pre>

You will notice that rand doesn't really produce random numbers.
To get it to do so, you need to use the srand function which "seeds"
the rand function so it will start at different points and produce
 truly random values.  The rand function should be run only once in
 the whole program.  Do not run it inside your functions since then
 it will be run every time your function is called.
Also, the srand function takes a parameter by which it seeds. 
 You will want to give it different numbers each time.  
The easiest way to do this is to use the time function.
The time function is found in the time.h library. 
 Here is how to use the srand with the rand function:

<pre>
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;time.h&gt;
using namespace std;
int main()
{
int a;
srand(time(0));
a = rand()%100 + 1 ;
a = rand()%100 + 1 ;
a = rand()%100 + 1 ;

return 1;
}
</pre>

Notice that I included two libraries in addition to the normal
iostream library. You should do the same when using the rand and
the  time functions.

<h3>Exercises
</h3>

<ol>
<li> Write a function named "isOdd" which has as a parameter one integer and returns true or false.
True if the integer supplied is odd and false if it is even.
<li> Write a function named "printAster" which prints a number of astericks in a single line. 
The number is determined by an integer parameter.

<li> Write a function called "multiply" which accepts two integer parameters and returns their
product.  The catch is that the function should only use the + operator and not the * operator.

<li> Write a function called "power" which computes the value of one number raised to any 
power.  The function should accept two integer parameters (one is the number and the other is the power by which it is raised) and returns the correct result. Use the previously defined function "multiply".
 Do not use the * operator. 
<li> Write a function called "LCM" which calculates the lowest common
multiple  of two integers and returns the answer. The LCM is lowest
muliple that the two numbers have in common. 
<li>Write a function called "rollDie" which will simulate the rolling of a six
sided die. One sixth of the time the function should return 1, one sixth of the time it
should return 2, etc.  Use the rand function and the % operator.

<li> Write a function called divide which divide two numbers.  Prevent division by zero.
Do not use the / operator.  Use the - operator.
<li> Write a function called factorial to compute and return the factorial of a number.
Do not use the * operator.  Use the function multiply.

<li> Write a function called roll2Dice which simulates the rolling of 2 dice.
Use 2 calls to the function rollDie.
<li>A perfect number is a number whose factors (including 1 but not 
including the number itself) add up to the number 
itself.  For example 6 is a perfect number since its factors ( 1, 2, 3)
 add up to six.  Write a function which accepts as a parameter one
number and returns true if the number is perfect, false if not.
<li> A prime number is a number only divisible by 1 and itself.
Write a function which accepts as a parameter an integer and returns
true if the number is prime, false if it is not prime.

<li>Write a function which accepts an integer and returns that integer
 where the digits are in reversed order.  For example, if you give 
it  the number 1234 it will return 4321. If you give it 1200 it
will return 21 (leading zeroes will be lost automatically.)
</ol>

<p>

<br>
&copy Nachum Danzig November 2004 - November 2006

</body>
</html>











