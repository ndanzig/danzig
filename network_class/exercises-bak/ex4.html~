<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (X11; I; BSD/OS 4.1 i386) [Netscape]">
   <title>Assignment #4</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000EE" vlink="#551A8B" alink="#FF0000">

<center>
<h1>
<b><u><font size=+4>Assignment #4</font></u></b></h1></center>
Write a program that simulates the Modem Communication Protocol (by sending
a file) between a DTE (processor) to a DCE (modem). The sender will be
the DTE and the receiver the DCE. The program will be called <tt>dte2dce</tt>
and receives from the user the following command line parameters:
<ol>
<li>
Mode (dte or dce).</li>

<li>
The COM (COM1, COM2, COM3 or COM4).</li>

<li>
Word length (5 - 8).</li>

<li>
Number of stop bits (1, 1.5, 2).</li>

<li>
Parity (even, odd, or none).</li>

<li>
Transfer rate (given the transfer rate you must compute the baud rate).</li>

<li>
Name of text file to transfer (dte only).</li>
</ol>
For example the sender must run his program like this:
<pre>C:\>dte2dce dte COM1 8 1 odd 1200 ex4.c</pre>
The receiver must run his program like this:
<pre>C:\>dte2dce dce COM1 8 1 odd 1200</pre>
The program must get the base address of the COM from the BIOS (address
0x400).
<h3>
<b><font color="#3366FF">DTE</font></b></h3>

<ul>
<li>
After the transmission parameters have been set, the DTE establishes communication
according to protocol.</li>

<li>
It then reads the file line by line and sends each line as a "packet" to
the DCE.</li>

<li>
A packet is a block of bytes framed by a flag byte, the value of the flag
byte is 0x7e (the '~' character). The packet is followed by the CRC byte.
If the input file contains the '~' character it is exchanged with the string
"/$/@/" (you may assume this string isn't in the input file).</li>

<li>
Data is sent using the code you have written for the previous assignment.
You must make sure of course before sending a byte that the DCE is ready
to receive data (the <font color="#FF0000">CTS </font>and <font color="#FF0000">DSR</font>
are set).</li>

<li>
When the DTE isn't transmitting (reading from the file for example) the
RTS must be reset, this&nbsp;<br>
notifies the DCE that transmission is suspended.</li>

<li>
After the file is sent the connection is severed (terminated)&nbsp; by
resetting the <font color="#FF0000">DTR</font>.</li>

<li>
As in the previous assignment you must listen for errors that the DCE might
detect and send, print them, and terminate transmission (according to protocol).</li>
</ul>

<h3>
<b><font color="#3366FF">DCE</font></b></h3>

<ul>
<li>
After the transmission parameters have been set, the DCE waits until the
DTE establishes communication.</li>

<li>
It then enters a loop where it receives "packets" from the DTE. The packets
are stored in a buffer. When the buffer is full the DCE prints its contents
to the screen. The DCE must reset the <font color="#FF0000">CTS</font>
when it is printing and set it when it is ready to receive more packets.</li>

<li>
If there is an error in the data the DCE must let the DTE know what the
error is (a bad CRC or a packet that doesn't start with the '~' char are
also errors). Only the DTE can terminate communication by reseting the
<font color="#FF0000">DTR</font>. The DCE then resets the <font color="#FF0000">DSR</font>.</li>
</ul>
It doesn't matter which side is started first, the DCE must wait for the
DTE and vice-versa. Thus when a program exits it must make sure that all
the control lines are reset.
</body>
</html>
