<head>
<TITLE>Programming - User Defined Classes</TITLE>
</head>
<BODY BGCOLOR="#ffffff" TEXT="#000044" link="#000099" vlink="#990000" alink="#0\
0ff00">
<CENTER><H2>Introduction to Computer Science - Java</H2></CENTER>
<CENTER><H3>Creating User Defined Classes</H3></CENTER>
<p> &nbsp; &nbsp; &nbsp; &nbsp;
What is a class?  It is a model of a real-world thing.  
Things in the real world
have descriptions ( attributes )  and things they do (
behavior or methodology). The first thing to do with a programming problem
 is to try to see if there are any real world things which you can model.
Then, make classes for them and give the classes useful behaviour.
This should help to organize your final program.
<p>
Here is the basic form of a class:
<pre>
class X
{
//attributes
type Y;
//behavior
X(type Z)//constructor method
   {
   Y=Z;
   }

}//end class
</pre>
<p>
When a class is instanciated you must run the <font color="blue">
new</font> command.  This will cause the constructor function to be run.
The constructor function is run only when the <font color="blue">
new </font> command is run, therefore it
 can only be run once per instance.  The purpose of the constuctor function is
 to assign values to the attributes of the class. Normally all non-static 
attributes are assigned initial values in this way.  Non-static 
attributes are different for each instance.  If you would be able to assign 
them values in the class definition, then all instances would have 
the same values. This is not desireable.  Since you want the attributes 
to be different for each instance, you can only give initial values when 
the new instance is created, i.e. when the <font color="blue"> new </font> 
command is run.  At that time the new instance will be created and assign
it initial values.
<p>
Class attributes can not
be assign values in the class definition unless they are defined as static.
Defining an attribute as static means that there is only one 
attribute of this name per <b>class</b>.  In other words, no matter how 
many instnaces of the class I make, that static attribute will 
only have one value.  A static attribute will be created and initialized
at compile time.  Therefore is exists even before any new is run.
This might be useful if I wanted to keep tract of the number of instaces of a
particular class I have created. 
<p> Similarly, static methods only exist once 
per class.
They are called class methods.  We saw an example of  one with Strings. It was
called valueOf.  If you recall, to run this method we  write String.valueOf(). 
Static methods are called in this way.
We do not write <font color="green"> instance</font>.method() instead we write <font color="green">Class</font>.method(). Static methods can do anything 
except access instance attributes.  They can create variables, accept 
parameters, and access static class attributes. <br>
<a href="./Ice_Cream.html"> Here is an example demonstrating the use of a 
static method in a very simple class.</a>

<p>
Exercise: Think of any real world thing and model it with a class.

<p> &nbsp; &nbsp; &nbsp; &nbsp;
Here is an example of a simple class called "dog"
and another class call "kennel" which uses the class "dog".
Java requires that each class be in a separate file.
No more than one class can be in any file. 
Dog and kennel are in two separate files named dog.java and kennel.java.  
They are saved in the same directory.
When kennel.java is compiled, the compiler sees the reference to dog
and looks for the dog.java file and compiles it as well.
Both files must be in the same directory in order for the compiler to find them.
Although this is an example of only two classes, the same principles 
demonstrated here can be used for any number of classes. 
<p>
file <font color="blue"> dog.java </font> 
<pre>

public class dog
{
//Attributes  [i.e. data]
private String name;
private String owner;
private String breed;
private int age;


//Behavior [i.e. methods]

//Constructors
public dog()  //constructor which takes no parameters, sets to default
{
name="";
owner="";
breed="";
age=0;
}

//fully parameterized constructor
public dog(String name, String owner, String breed, int age)
{
this.name=name;
this.owner=owner;
this.breed=breed;
this.age=age;
}

//copy constructor
public dog(dog someDog)
{
this.name=someDog.getName();
this.owner=someDog.getOwner();
this.breed=someDog.getBreed();
this.age=someDog.getAge();
}


//other behavior (non-constructor behavior)
public String getName()
{
return name;
}
public String getOwner()
{
return owner;
}
public String getBreed()
{
return breed;
}
public int getAge()
{
return age;
}

public int computeYearsToLive()
{
int toLive;
if(breed.equalsIgnoreCase("german"))
	{
	toLive=15-age;
	}
else if(breed.equalsIgnoreCase("boxer"))
	{
        toLive=11-age;
        }
else if(breed.equalsIgnoreCase("terrier"))
	{
        toLive=8-age;
        }
else if(breed.equalsIgnoreCase("doberman"))
	{
        toLive=13-age;
        }
else
	{
        toLive=14-age;
        }
return toLive;
}//end method computeYearsToLive()

}//end class

<p>
file <font color="blue"> kennel.java </font>

import javax.swing.JOptionPane;

public class kennel
{
 public static void main( String args[] )
 {
     String tempName="",tempOwner="",  tempBreed="", output="";
     int tempAge, c, counter;
     dog dogArray[] = new dog[10];

     for( c=0 ; c <10; c++)
	 {
	     tempName=JOptionPane.showInputDialog("Enter name of dog, type quit when done.");
	     if(tempName.equalsIgnoreCase("quit"))
		 {
		     break; 
		 }
	     tempOwner=JOptionPane.showInputDialog("Enter name of owner of dog");
	     tempBreed=JOptionPane.showInputDialog("Enter breed of dog");
	     tempAge=Integer.parseInt(JOptionPane.showInputDialog("Enter age of dog"));
	     dogArray[c] = new dog(tempName, tempOwner ,tempBreed, tempAge);
	 }
     while(true)
	 {
	     tempName=JOptionPane.showInputDialog("Enter name of dog to display, type quit to exit.");
	     if(tempName.equalsIgnoreCase("quit"))
		 {
		     break;
		 }
	     for( counter =0 ; counter < c; counter++)
		 {
		     if(tempName.equalsIgnoreCase(dogArray[counter].getName()) )
			 {
			     JOptionPane.showMessageDialog(null, "Your dog info is:\n"
			     + "Name: "+dogArray[counter].getName() +
			     "\nOwner Name: "+dogArray[counter].getOwner() +
			     "\nBreed: "+dogArray[counter].getBreed()+
			     "\nAge: "+dogArray[counter].getAge()+
			     "\nYear Left to Live: "+
		      	     dogArray[counter].computeYearsToLive() );
			     break; //exit for loop
			 }//end if
		 }
	     if (counter==c)
		 {
		     JOptionPane.showMessageDialog(null, "Dog not found! He must have died.");
		 }
	 }//end while
  JOptionPane.showMessageDialog(null, "So long!");
  System.exit(0);
 }//end main()
}//end class
</pre>

<p>

<p>
&copy; Nachum Danzig December 2003
</body>
</html>