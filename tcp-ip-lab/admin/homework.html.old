<!-- FILE: homework.html  -->
<HTML>
<HEAD>
<TITLE>TCP/IP Lab Homework: 5763 (2003-4)</TITLE>
<CENTER><H1>TCP/IP Lab Homework: 5763 (2003-4)</H1></CENTER>
</HEAD>


<BODY>
<p> <h3>These three homework assignments must be completed before the final project may be submitted.
they will account for 40% of your final grade.
</h3>

<ol>
<li>Write two programs (one server one client) using unix tcp sockets to allow characters typed 
on one computer to be sent to another computer.  Use tcp connection oriented communication. For a very detailed tutorial on sockets try <a href="http://sushantshome.tripod.com/pen/net/index.html"> here </a> or the <a href="http://www.ecst.csuchico.edu/~beej/guide/net/"> official site </a> and if you want a Hebrew translation try<a href="http://www.geocities.com/uv1st/netguide-heb/"> here.</a>
<br>Points of clarification for this and the 2nd exercise:
<ul>
<li>Do not specify port for server. Let the system choose a port for you.
<br>i.e. <tt>server </tt>
<br><tt>Server connected to port 3405!</tt>
<li>Specify server name and port as argument in command line of client.
<br>i.e. <tt>client shana31.jct.ac.il 3405</tt>
<li>Server should be ready to accept a new client as soon as the
 previous client disconnects.
<li>client should be able to send several lines of text.
<li>Handle signal control-c in server and client.  First close sockets and then exit program.
<li>If client sends string quit or <b>disconnects</b>, server should disconnect and be ready for another client.
</ul>
<li>Do the same as above but using udp connectionless communication and DO
specify the port in the server's command line.  Then have the client connect to that port.
<br>i.e. <tt>server 3405</tt>

<br>then on the client run:
<br><tt>client shana31.jct.ac.il 3405</tt>

<li>Make a small protocol for udp transmission.
Add to the above udp server the limitation that the sending and receiving 
buffer is only 10 bytes long.  Only the last 5 bytes of which can be used to 
put the string in, therefore a string will be sent sometimes in two or three
send calls.  The first byte of the 10 byte "packet" will contain the number
of the packet so that the  server can asseble them in order.  The 2nd 3rd 
 and 4th  bytes will be a special number assigned by the server to make sure 
he is
 still
talking to the same client. (Use all possible binary values for number, i.e.
maximum number is not 999, but is 2 to the 24th power.) On the first 
connection, the client  will send 0
in place of the special  number to indicate this is the first time.
The 5th byte is not used.
After each  packet the server will send an acknowldgement that he received
 packet number 1, or 2 or 3 etc. and the client will check this packet and
 know to then send the next packet in order. Check that packets do not
arrive out of order. You can choose how the acknowledge 
packet will be made up.
Print out the entire  packet (including all headers) on each receive.
Indicate the end of each <strong>line</strong> with the character '@'.  
When this character is detected in the packet, the server should print all the
 data sections he received and be ready for the next string.
If a packet with the wrong ID number arrives, send an error packet to that client.  Similarly, if a packet with the wrong packet number arrives you may either
send an error packet and disconnect or try to correct the packet order
by sending an acknowledge on the previously received correct packet. 
</ol>

    
</BODY>
</HTML>


